using NarrativeCharts.Models;

using System.Collections.Immutable;
using System.Globalization;
using System.Text;

namespace NarrativeCharts.Scripting;

/// <summary>
/// Utilities for <see cref="ScriptConverter"/>.
/// </summary>
public static class ScriptConverterUtils
{
	/// <summary>
	/// Converts <paramref name="defs"/> to a C# autogenerated equivalent.
	/// </summary>
	/// <param name="defs"></param>
	/// <returns></returns>
	public static string ConvertToCode(this ScriptDefinitions defs)
	{
		const string USINGS =
$@"using {nameof(NarrativeCharts)}.{nameof(Models)};

using {nameof(System)}.{nameof(System.Collections)}.{nameof(System.Collections.Immutable)};";

		const string NAMESPACE = "NarrativeCharts.Generated";

		return new StringBuilder()
			.AppendLine(USINGS)
			.AppendLine()
			.Append("namespace ").Append(NAMESPACE).AppendLine(";")
			.AppendLine()
			.Append(defs.ConvertTimeToCode())
			.AppendLine()
			.Append(defs.ConvertLocationsToCode())
			.AppendLine()
			.Append(defs.ConvertCharactersToCode())
			.ToString();
	}

	private static StringBuilder AppendProperty<T>(this StringBuilder sb, string property)
	{
		return sb
			.Append("\tpublic static ")
			.AppendType<T>()
			.Append(' ')
			.Append(property)
			.Append(" { get; }");
	}

	private static StringBuilder AppendType<T>(this StringBuilder sb)
		=> sb.AppendType(typeof(T));

	private static StringBuilder AppendType(this StringBuilder sb, Type type)
	{
		// this isn't recursive because the type arguments will never be generic
		if (type.IsGenericType)
		{
			return sb
				.Append(type.Name.Split('`', 2)[0])
				.Append('<')
				.AppendJoin(", ", type.GenericTypeArguments.Select(x => x.Name))
				.Append('>');
		}
		else
		{
			return sb.Append(type.Name);
		}
	}

	private static StringBuilder ConvertCharactersToCode(this ScriptDefinitions defs)
	{
		const string COLORS = "Colors";
		const string CLASS = "AutogeneratedCharacters";

		var sb = new StringBuilder()
			.AppendLine($"public static class {CLASS}")
			.AppendLine("{");
		var dict = new StringBuilder();

		foreach (var (character, color) in defs.CharacterColors.OrderBy(x => x.Key.Value))
		{
			var property = ToValidProperty(character.Value);

			sb
				.AppendProperty<Character>(property)
				.Append(" = new(\"")
				.Append(character.Value)
				.AppendLine("\");");

			dict
				.Append("\t\t\t[")
				.Append(property)
				.Append("] = ");
			if (color == Hex.Unknown)
			{
				dict
					.AppendLine($"{nameof(Hex)}.{nameof(Hex.Unknown)},");
			}
			else
			{
				dict
					.Append("new(\"")
					.Append(color.Value)
					.AppendLine("\"),");
			}
		}

		{
			sb
				.AppendProperty<ImmutableDictionary<Character, Hex>>(COLORS)
				.AppendLine()
				.AppendLine()
				.AppendLine($"\tstatic {CLASS}()")
				.AppendLine("\t{")
				.Append($"\t\t{COLORS} = new ")
				.AppendType<Dictionary<Character, Hex>>()
				.AppendLine()
				.AppendLine("\t\t{")
				.Append(dict)
				.AppendLine("\t\t}.ToImmutableDictionary();")
				.AppendLine("\t}");
		}

		return sb.AppendLine("}");
	}

	private static StringBuilder ConvertLocationsToCode(this ScriptDefinitions defs)
	{
		const string YINDEXES = "YIndexes";
		const string CLASS = "AutogeneratedLocations";

		var sb = new StringBuilder()
			.AppendLine($"public static class {CLASS}")
			.AppendLine("{");
		var dict = new StringBuilder();

		foreach (var (location, index) in defs.LocationYIndexes.OrderBy(x => x.Value))
		{
			var property = ToValidProperty(location.Value);

			sb
				.AppendProperty<Location>(property)
				.Append(" = new(\"")
				.Append(location.Value)
				.AppendLine("\");");

			dict
				.Append("\t\t\t")
				.Append(property)
				.AppendLine(",");
		}

		{
			sb
				.AppendProperty<ImmutableDictionary<Location, int>>(YINDEXES)
				.AppendLine()
				.AppendLine()
				.AppendLine($"\tstatic {CLASS}()")
				.AppendLine("\t{")
				.AppendLine($"\t\t{YINDEXES} = new[]")
				.AppendLine("\t\t{")
				.Append(dict)
				.AppendLine("\t\t}")
				.AppendLine("\t\t.Select((x, i) => (Item: x, Index: i))")
				.AppendLine("\t\t.ToImmutableDictionary(x => x.Item, x => x.Index);")
				.AppendLine("\t}");
		}

		return sb.AppendLine("}");
	}

	private static StringBuilder ConvertTimeToCode(this ScriptDefinitions defs)
	{
		const string CLASS = "AutogeneratedTimeUnits";

		var sb = new StringBuilder()
			.AppendLine($"public enum {CLASS}")
			.AppendLine("{");

		foreach (var (alias, value) in defs.TimeUnitAliases.OrderBy(x => x.Value))
		{
			var property = ToValidProperty(alias);
			// Only ignore members that are purely number names
			// Other syntax errors should be allowed to be output
			if (property.Length == 0 && int.TryParse(alias, out _))
			{
				continue;
			}

			sb
				.Append('\t')
				.Append(alias)
				.Append(" = ")
				.Append(value)
				.AppendLine(",");
		}

		return sb.AppendLine("}");
	}

	private static string ToValidProperty(string value)
	{
		var sb = new StringBuilder(value.Length);
		for (var i = 0; i < value.Length; ++i)
		{
			var c = value[i];
			if (c == '-')
			{
				c = '_';
			}

			switch (char.GetUnicodeCategory(c))
			{
				case UnicodeCategory.UppercaseLetter:
				case UnicodeCategory.LowercaseLetter:
				case UnicodeCategory.TitlecaseLetter:
				case UnicodeCategory.ModifierLetter:
				case UnicodeCategory.OtherLetter:
					// Always allowed in C# identifiers
					sb.Append(c);
					continue;

				case UnicodeCategory.LetterNumber:
				case UnicodeCategory.NonSpacingMark:
				case UnicodeCategory.SpacingCombiningMark:
				case UnicodeCategory.DecimalDigitNumber:
				case UnicodeCategory.ConnectorPunctuation:
				case UnicodeCategory.Format:
					// Only allowed after first char
					if (i != 0)
					{
						sb.Append(c);
					}
					continue;
			}
		}
		return sb.ToString();
	}
}